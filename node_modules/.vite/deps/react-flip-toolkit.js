"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  require_prop_types
} from "./chunk-K5BTB6VY.js";
import {
  require_react
} from "./chunk-ZJ2K3BGO.js";
import {
  __toESM,
  require_dist
} from "./chunk-XKM5DGTP.js";

// ../node_modules/react-flip-toolkit/lib/index.es.js
var import_dist3 = __toESM(require_dist());
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// ../node_modules/flip-toolkit/lib/index.es.js
var import_dist2 = __toESM(require_dist());

// ../node_modules/rematrix/dist/rematrix.es.js
var import_dist = __toESM(require_dist());
function format(source) {
  if (source.constructor !== Array) {
    throw new TypeError("Expected array.");
  }
  if (source.length === 16) {
    return source;
  }
  if (source.length === 6) {
    var matrix = identity();
    matrix[0] = source[0];
    matrix[1] = source[1];
    matrix[4] = source[2];
    matrix[5] = source[3];
    matrix[12] = source[4];
    matrix[13] = source[5];
    return matrix;
  }
  throw new RangeError("Expected array with either 6 or 16 values.");
}
function identity() {
  var matrix = [];
  for (var i3 = 0; i3 < 16; i3++) {
    i3 % 5 == 0 ? matrix.push(1) : matrix.push(0);
  }
  return matrix;
}
function multiply(m3, x2) {
  var fm = format(m3);
  var fx = format(x2);
  var product = [];
  for (var i3 = 0; i3 < 4; i3++) {
    var row = [fm[i3], fm[i3 + 4], fm[i3 + 8], fm[i3 + 12]];
    for (var j2 = 0; j2 < 4; j2++) {
      var k2 = j2 * 4;
      var col = [fx[k2], fx[k2 + 1], fx[k2 + 2], fx[k2 + 3]];
      var result = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];
      product[i3 + k2] = result;
    }
  }
  return product;
}
function parse(source) {
  if (typeof source === "string") {
    var match = source.match(/matrix(3d)?\(([^)]+)\)/);
    if (match) {
      var raw = match[2].split(", ").map(parseFloat);
      return format(raw);
    }
  }
  return identity();
}
function scaleX(scalar) {
  var matrix = identity();
  matrix[0] = scalar;
  return matrix;
}
function scaleY(scalar) {
  var matrix = identity();
  matrix[5] = scalar;
  return matrix;
}
function translateX(distance) {
  var matrix = identity();
  matrix[12] = distance;
  return matrix;
}
function translateY(distance) {
  var matrix = identity();
  matrix[13] = distance;
  return matrix;
}

// ../node_modules/flip-toolkit/lib/index.es.js
var e = function(t2) {
  return "number" == typeof t2;
};
var i = function(t2) {
  return "function" == typeof t2;
};
var n = function(t2) {
  return "[object Object]" === Object.prototype.toString.call(t2);
};
var r = function(t2) {
  return Array.prototype.slice.apply(t2);
};
var s = function(t2) {
  var e3 = t2.reduce(function(t3, e4) {
    return t3[e4] = (t3[e4] || 0) + 1, t3;
  }, {});
  return Object.keys(e3).filter(function(t3) {
    return e3[t3] > 1;
  });
};
function a(t2) {
  return [].slice.call(arguments, 1).forEach(function(e3) {
    if (e3) for (var i3 in e3) Object.prototype.hasOwnProperty.call(e3, i3) && (t2[i3] = e3[i3]);
  }), t2;
}
var o;
var l = function(t2, e3, i3) {
  return t2 + (e3 - t2) * i3;
};
var p = { __proto__: null, isNumber: e, isFunction: i, isObject: n, toArray: r, getDuplicateValsAsStrings: s, assign: a, tweenProp: l };
var c = "data-flip-id";
var u = "data-inverse-flip-id";
var d = "data-portal-key";
var f = "data-exit-container";
var h = { __proto__: null, DATA_FLIP_ID: c, DATA_INVERSE_FLIP_ID: u, DATA_FLIP_COMPONENT_ID: "data-flip-component-id", DATA_FLIP_CONFIG: "data-flip-config", DATA_PORTAL_KEY: d, DATA_EXIT_CONTAINER: f };
var g = { noWobble: { stiffness: 200, damping: 26 }, gentle: { stiffness: 120, damping: 14 }, veryGentle: { stiffness: 130, damping: 17 }, wobbly: { stiffness: 180, damping: 12 }, stiff: { stiffness: 260, damping: 26 } };
var m = function(t2) {
  return n(t2) ? t2 : Object.keys(g).indexOf(t2) > -1 ? g[t2] : {};
};
"undefined" != typeof window && (o = window.requestAnimationFrame);
var v = o = o || function(t2) {
  window.setTimeout(t2, 1e3 / 60);
};
var y = Date.now();
var _ = "object" == typeof performance && "function" == typeof performance.now ? function() {
  return performance.now();
} : function() {
  return Date.now() - y;
};
function S(t2, e3) {
  var i3 = t2.indexOf(e3);
  -1 !== i3 && t2.splice(i3, 1);
}
var E = function() {
  function t2() {
  }
  return t2.prototype.run = function() {
    var t3 = this;
    v(function() {
      t3.springSystem.loop(_());
    });
  }, t2;
}();
var A = function() {
  this.position = 0, this.velocity = 0;
};
var C = 0;
var b = 1e-3;
var I = function() {
  function t2(t3) {
    this._id = "s" + C++, this._springSystem = t3, this.listeners = [], this._startValue = 0, this._currentState = new A(), this._displacementFromRestThreshold = 1e-3, this._endValue = 0, this._overshootClampingEnabled = false, this._previousState = new A(), this._restSpeedThreshold = 1e-3, this._tempState = new A(), this._timeAccumulator = 0, this._wasAtRest = true, this._cachedSpringConfig = {};
  }
  var e3 = t2.prototype;
  return e3.getId = function() {
    return this._id;
  }, e3.destroy = function() {
    this.listeners = [], this._springSystem.deregisterSpring(this);
  }, e3.setSpringConfig = function(t3) {
    return this._springConfig = t3, this;
  }, e3.getCurrentValue = function() {
    return this._currentState.position;
  }, e3.getDisplacementDistanceForState = function(t3) {
    return Math.abs(this._endValue - t3.position);
  }, e3.setEndValue = function(t3) {
    if (t3 === this._endValue) return this;
    if (this.prevEndValue = t3, this._endValue === t3 && this.isAtRest()) return this;
    this._startValue = this.getCurrentValue(), this._endValue = t3, this._springSystem.activateSpring(this.getId());
    for (var e4 = 0, i3 = this.listeners.length; e4 < i3; e4++) {
      var n3 = this.listeners[e4].onSpringEndStateChange;
      n3 && n3(this);
    }
    return this;
  }, e3.setVelocity = function(t3) {
    return t3 === this._currentState.velocity || (this._currentState.velocity = t3, this._springSystem.activateSpring(this.getId())), this;
  }, e3.setCurrentValue = function(t3) {
    this._startValue = t3, this._currentState.position = t3;
    for (var e4 = 0, i3 = this.listeners.length; e4 < i3; e4++) {
      var n3 = this.listeners[e4];
      n3.onSpringUpdate && n3.onSpringUpdate(this);
    }
    return this;
  }, e3.setAtRest = function() {
    return this._endValue = this._currentState.position, this._tempState.position = this._currentState.position, this._currentState.velocity = 0, this;
  }, e3.setOvershootClampingEnabled = function(t3) {
    return this._overshootClampingEnabled = t3, this;
  }, e3.isOvershooting = function() {
    var t3 = this._startValue, e4 = this._endValue;
    return this._springConfig.tension > 0 && (t3 < e4 && this.getCurrentValue() > e4 || t3 > e4 && this.getCurrentValue() < e4);
  }, e3.advance = function(t3, e4) {
    var i3 = this.isAtRest();
    if (!i3 || !this._wasAtRest) {
      var n3 = e4;
      e4 > 0.064 && (n3 = 0.064), this._timeAccumulator += n3;
      for (var r3, s2, a2, o2, l2, p2, c3 = this._springConfig.tension, u3 = this._springConfig.friction, d3 = this._currentState.position, f3 = this._currentState.velocity, h3 = this._tempState.position, g3 = this._tempState.velocity; this._timeAccumulator >= b; ) this._timeAccumulator -= b, this._timeAccumulator < b && (this._previousState.position = d3, this._previousState.velocity = f3), s2 = c3 * (this._endValue - h3) - u3 * f3, o2 = c3 * (this._endValue - (h3 = d3 + (r3 = f3) * b * 0.5)) - u3 * (g3 = f3 + s2 * b * 0.5), p2 = c3 * (this._endValue - (h3 = d3 + (a2 = g3) * b * 0.5)) - u3 * (g3 = f3 + o2 * b * 0.5), h3 = d3 + (l2 = g3) * b, d3 += 1 / 6 * (r3 + 2 * (a2 + l2) + (g3 = f3 + p2 * b)) * b, f3 += 1 / 6 * (s2 + 2 * (o2 + p2) + (c3 * (this._endValue - h3) - u3 * g3)) * b;
      this._tempState.position = h3, this._tempState.velocity = g3, this._currentState.position = d3, this._currentState.velocity = f3, this._timeAccumulator > 0 && this._interpolate(this._timeAccumulator / b), (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) && (this._springConfig.tension > 0 ? (this._startValue = this._endValue, this._currentState.position = this._endValue) : (this._endValue = this._currentState.position, this._startValue = this._endValue), this.setVelocity(0), i3 = true);
      var m3 = false;
      this._wasAtRest && (this._wasAtRest = false, m3 = true);
      var v2 = false;
      i3 && (this._wasAtRest = true, v2 = true), this.notifyPositionUpdated(m3, v2);
    }
  }, e3.notifyPositionUpdated = function(t3, e4) {
    var i3 = this;
    this.listeners.filter(Boolean).forEach(function(n3) {
      t3 && n3.onSpringActivate && !i3._onActivateCalled && (n3.onSpringActivate(i3), i3._onActivateCalled = true), n3.onSpringUpdate && n3.onSpringUpdate(i3), e4 && n3.onSpringAtRest && n3.onSpringAtRest(i3);
    });
  }, e3.systemShouldAdvance = function() {
    return !this.isAtRest() || !this.wasAtRest();
  }, e3.wasAtRest = function() {
    return this._wasAtRest;
  }, e3.isAtRest = function() {
    return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || 0 === this._springConfig.tension);
  }, e3._interpolate = function(t3) {
    this._currentState.position = this._currentState.position * t3 + this._previousState.position * (1 - t3), this._currentState.velocity = this._currentState.velocity * t3 + this._previousState.velocity * (1 - t3);
  }, e3.addListener = function(t3) {
    return this.listeners.push(t3), this;
  }, e3.addOneTimeListener = function(t3) {
    var e4 = this;
    return Object.keys(t3).forEach(function(i3) {
      var n3;
      t3[i3] = (n3 = t3[i3], function() {
        n3.apply(void 0, [].slice.call(arguments)), e4.removeListener(t3);
      });
    }), this.listeners.push(t3), this;
  }, e3.removeListener = function(t3) {
    return S(this.listeners, t3), this;
  }, t2;
}();
var w = function() {
  function t2(t3) {
    this.looper = t3 || new E(), this.looper.springSystem = this, this.listeners = [], this._activeSprings = [], this._idleSpringIndices = [], this._isIdle = true, this._lastTimeMillis = -1, this._springRegistry = {};
  }
  var e3 = t2.prototype;
  return e3.createSpring = function(t3, e4) {
    return this.createSpringWithConfig({ tension: t3, friction: e4 });
  }, e3.createSpringWithConfig = function(t3) {
    var e4 = new I(this);
    return this.registerSpring(e4), e4.setSpringConfig(t3), e4;
  }, e3.getIsIdle = function() {
    return this._isIdle;
  }, e3.registerSpring = function(t3) {
    this._springRegistry[t3.getId()] = t3;
  }, e3.deregisterSpring = function(t3) {
    S(this._activeSprings, t3), delete this._springRegistry[t3.getId()];
  }, e3.advance = function(t3, e4) {
    for (var i3 = this; this._idleSpringIndices.length > 0; ) this._idleSpringIndices.pop();
    for (this._activeSprings.filter(Boolean).forEach(function(n4) {
      n4.systemShouldAdvance() ? n4.advance(t3 / 1e3, e4 / 1e3) : i3._idleSpringIndices.push(i3._activeSprings.indexOf(n4));
    }); this._idleSpringIndices.length > 0; ) {
      var n3 = this._idleSpringIndices.pop();
      n3 >= 0 && this._activeSprings.splice(n3, 1);
    }
  }, e3.loop = function(t3) {
    var e4;
    -1 === this._lastTimeMillis && (this._lastTimeMillis = t3 - 1);
    var i3 = t3 - this._lastTimeMillis;
    this._lastTimeMillis = t3;
    var n3 = 0, r3 = this.listeners.length;
    for (n3 = 0; n3 < r3; n3++) (e4 = this.listeners[n3]).onBeforeIntegrate && e4.onBeforeIntegrate(this);
    for (this.advance(t3, i3), 0 === this._activeSprings.length && (this._isIdle = true, this._lastTimeMillis = -1), n3 = 0; n3 < r3; n3++) (e4 = this.listeners[n3]).onAfterIntegrate && e4.onAfterIntegrate(this);
    this._isIdle || this.looper.run();
  }, e3.activateSpring = function(t3) {
    var e4 = this._springRegistry[t3];
    -1 === this._activeSprings.indexOf(e4) && this._activeSprings.push(e4), this.getIsIdle() && (this._isIdle = false, this.looper.run());
  }, t2;
}();
var O = new w();
var x = function(t2) {
  var e3 = t2.springConfig, i3 = e3.overshootClamping, n3 = t2.getOnUpdateFunc, r3 = t2.onAnimationEnd, s2 = t2.onSpringActivate, a2 = O.createSpring(e3.stiffness, e3.damping);
  a2.setOvershootClampingEnabled(!!i3);
  var o2 = { onSpringActivate: s2, onSpringAtRest: function() {
    a2.destroy(), r3();
  }, onSpringUpdate: n3({ spring: a2, onAnimationEnd: r3 }) };
  return a2.addListener(o2), a2;
};
var U = function(t2) {
  var e3 = x(t2);
  return e3.setEndValue(1), e3;
};
var V = function(t2, e3) {
  if (void 0 === e3 && (e3 = {}), t2 && t2.length) {
    e3.reverse && t2.reverse();
    var i3, n3 = "number" != typeof (i3 = e3.speed) ? 1.1 : 1 + Math.min(Math.max(5 * i3, 0), 5), r3 = 1 / Math.max(Math.min(t2.length, 100), 10), s2 = t2.map(function(t3, e4) {
      var i4 = t3.getOnUpdateFunc;
      return t3.getOnUpdateFunc = function(t4) {
        var a2 = i4(t4);
        return function(t5) {
          var i5 = t5.getCurrentValue();
          (i5 = i5 < 0.01 ? 0 : i5 > 0.99 ? 1 : i5) >= r3 && s2[e4 + 1] && s2[e4 + 1](Math.max(Math.min(i5 * n3, 1), 0)), a2(t5);
        };
      }, t3;
    }).map(function(t3) {
      var e4 = x(t3);
      if (e4) return e4.setEndValue.bind(e4);
    }).filter(Boolean);
    s2[0] && s2[0](1);
  }
};
var F = function(t2) {
  return [0, 1, 4, 5, 12, 13].map(function(e3) {
    return t2[e3];
  });
};
var P = function(t2) {
  return t2.top < window.innerHeight && t2.bottom > 0 && t2.left < window.innerWidth && t2.right > 0;
};
function D(t2) {
  return JSON.parse(t2.dataset.flipConfig || "{}");
}
var R = function(t2, e3) {
  var i3;
  return a(t2, ((i3 = {})[e3[0]] = e3[1], i3));
};
var T = function(t2, e3) {
  return r(e3 ? document.querySelectorAll("[" + d + '="' + e3 + '"]') : t2.querySelectorAll("[" + c + "]"));
};
var M = function(t2) {
  return t2.map(function(t3) {
    return [t3, t3.getBoundingClientRect()];
  });
};
var k = function(n3) {
  var o2 = n3.cachedOrderedFlipIds, p2 = void 0 === o2 ? [] : o2, f3 = n3.inProgressAnimations, h3 = void 0 === f3 ? {} : f3, v2 = n3.flippedElementPositionsBeforeUpdate, y3 = void 0 === v2 ? {} : v2, _2 = n3.flipCallbacks, S2 = void 0 === _2 ? {} : _2, E2 = n3.containerEl, A2 = n3.applyTransformOrigin, C2 = n3.spring, b2 = n3.debug, I2 = n3.portalKey, w2 = n3.staggerConfig, O2 = void 0 === w2 ? {} : w2, x2 = n3.decisionData, k2 = void 0 === x2 ? {} : x2, j2 = n3.handleEnterUpdateDelete, B2 = n3.onComplete, N2 = n3.onStart;
  if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
    var L2, q = M(T((L2 = { element: E2, portalKey: I2 }).element, L2.portalKey)).map(function(t2) {
      var e3 = t2[0], i3 = t2[1], n4 = window.getComputedStyle(e3);
      return [e3.dataset.flipId, { element: e3, rect: i3, opacity: parseFloat(n4.opacity), transform: n4.transform }];
    }).reduce(R, {}), X = function(t2) {
      var e3 = t2.containerEl, i3 = t2.portalKey;
      return i3 ? /* @__PURE__ */ function(t3) {
        return function(e4) {
          return r(document.querySelectorAll("[" + d + '="' + t3 + '"]' + e4));
        };
      }(i3) : e3 ? function(t3) {
        var e4 = Math.random().toFixed(5);
        return t3.dataset.flipperId = e4, function(i4) {
          return r(t3.querySelectorAll('[data-flipper-id="' + e4 + '"] ' + i4));
        };
      }(e3) : function() {
        return [];
      };
    }({ containerEl: E2, portalKey: I2 }), Y = /* @__PURE__ */ function(t2) {
      return function(e3) {
        return t2("[" + c + '="' + e3 + '"]')[0];
      };
    }(X), W = function(t2) {
      return y3[t2] && q[t2];
    }, K = Object.keys(y3).concat(Object.keys(q)).filter(function(t2) {
      return !W(t2);
    }), H = { flipCallbacks: S2, getElement: Y, flippedElementPositionsBeforeUpdate: y3, flippedElementPositionsAfterUpdate: q, inProgressAnimations: h3, decisionData: k2 }, J = function(t2) {
      var e3, i3 = t2.unflippedIds, n4 = t2.flipCallbacks, r3 = t2.getElement, s2 = t2.flippedElementPositionsBeforeUpdate, a2 = t2.flippedElementPositionsAfterUpdate, o3 = t2.inProgressAnimations, l2 = t2.decisionData, p3 = i3.filter(function(t3) {
        return a2[t3];
      }).filter(function(t3) {
        return n4[t3] && n4[t3].onAppear;
      }), c3 = i3.filter(function(t3) {
        return s2[t3] && n4[t3] && n4[t3].onExit;
      }), u3 = new Promise(function(t3) {
        e3 = t3;
      }), d3 = [], f4 = 0, h4 = c3.map(function(t3, i4) {
        var r4 = s2[t3].domDataForExitAnimations, a3 = r4.element, p4 = r4.parent, c4 = r4.childPosition, u4 = c4.top, h5 = c4.left, g3 = c4.width, m3 = c4.height;
        "static" === getComputedStyle(p4).position && (p4.style.position = "relative"), a3.style.transform = "matrix(1, 0, 0, 1, 0, 0)", a3.style.position = "absolute", a3.style.top = u4 + "px", a3.style.left = h5 + "px", a3.style.height = m3 + "px", a3.style.width = g3 + "px";
        var v3 = d3.filter(function(t4) {
          return t4[0] === p4;
        })[0];
        v3 || (v3 = [p4, document.createDocumentFragment()], d3.push(v3)), v3[1].appendChild(a3), f4 += 1;
        var y4 = function() {
          try {
            p4.removeChild(a3);
          } catch (t4) {
          } finally {
            0 == (f4 -= 1) && e3();
          }
        };
        return o3[t3] = { stop: y4 }, function() {
          return n4[t3].onExit(a3, i4, y4, l2);
        };
      });
      return d3.forEach(function(t3) {
        t3[0].appendChild(t3[1]);
      }), h4.length || e3(), { hideEnteringElements: function() {
        p3.forEach(function(t3) {
          var e4 = r3(t3);
          e4 && (e4.style.opacity = "0");
        });
      }, animateEnteringElements: function() {
        p3.forEach(function(t3, e4) {
          var i4 = r3(t3);
          i4 && n4[t3].onAppear(i4, e4, l2);
        });
      }, animateExitingElements: function() {
        return h4.forEach(function(t3) {
          return t3();
        }), u3;
      } };
    }(a({}, H, { unflippedIds: K })), z = J.hideEnteringElements, G = J.animateEnteringElements, Q = J.animateExitingElements, Z = a({}, H, { containerEl: E2, flippedIds: p2.filter(W), applyTransformOrigin: A2, spring: C2, debug: b2, staggerConfig: O2, scopedSelector: X, onComplete: B2 });
    N2 && N2(E2, k2);
    var $ = function(n4) {
      var o3, p3 = n4.flippedIds, c3 = n4.flipCallbacks, d3 = n4.inProgressAnimations, f4 = n4.flippedElementPositionsBeforeUpdate, h4 = n4.flippedElementPositionsAfterUpdate, v3 = n4.applyTransformOrigin, y4 = n4.spring, _3 = n4.getElement, S3 = n4.debug, E3 = n4.staggerConfig, A3 = void 0 === E3 ? {} : E3, C3 = n4.decisionData, b3 = void 0 === C3 ? {} : C3, I3 = n4.onComplete, w3 = n4.containerEl, O3 = new Promise(function(t2) {
        o3 = t2;
      });
      if (I3 && O3.then(function() {
        return I3(w3, b3);
      }), !p3.length) return function() {
        return o3([]), O3;
      };
      var x3 = [], R2 = _3(p3[0]), T2 = R2 ? R2.ownerDocument.querySelector("body") : document.querySelector("body");
      s(p3);
      var M2 = p3.map(function(n5) {
        var s2 = f4[n5].rect, p4 = h4[n5].rect, _4 = f4[n5].opacity, S4 = h4[n5].opacity, E4 = p4.width < 1 || p4.height < 1, A4 = h4[n5].element;
        if (!P(s2) && !P(p4)) return false;
        if (!A4) return false;
        var C4, I4, w4, O4 = D(A4), U2 = (w4 = (I4 = void 0 === (C4 = { flipperSpring: y4, flippedSpring: O4.spring }) ? {} : C4).flippedSpring, a({}, g.noWobble, m(I4.flipperSpring), m(w4))), V2 = true === O4.stagger ? "default" : O4.stagger, R3 = { element: A4, id: n5, stagger: V2, springConfig: U2 };
        if (c3[n5] && c3[n5].shouldFlip && !c3[n5].shouldFlip(b3.previous, b3.current)) return false;
        var k4 = Math.abs(s2.left - p4.left) + Math.abs(s2.top - p4.top), j4 = Math.abs(s2.width - p4.width) + Math.abs(s2.height - p4.height), B4 = Math.abs(S4 - _4);
        if (0 === s2.height && 0 === p4.height || 0 === s2.width && 0 === p4.width || k4 < 0.5 && j4 < 0.5 && B4 < 0.01) return false;
        var N4 = parse(h4[n5].transform), L4 = { matrix: N4 }, q3 = { matrix: [] }, X2 = [N4];
        O4.translate && (X2.push(translateX(s2.left - p4.left)), X2.push(translateY(s2.top - p4.top))), O4.scale && (X2.push(scaleX(Math.max(s2.width, 1) / Math.max(p4.width, 1))), X2.push(scaleY(Math.max(s2.height, 1) / Math.max(p4.height, 1)))), O4.opacity && (q3.opacity = _4, L4.opacity = S4);
        var Y2 = [];
        if (!c3[n5] || !c3[n5].shouldInvert || c3[n5].shouldInvert(b3.previous, b3.current)) {
          var W2 = function(t2, e3) {
            return r(t2.querySelectorAll("[" + u + '="' + e3 + '"]'));
          }(A4, n5);
          Y2 = W2.map(function(t2) {
            return [t2, D(t2)];
          });
        }
        q3.matrix = F(X2.reduce(multiply)), L4.matrix = F(L4.matrix);
        var K2, H2 = function(t2) {
          var i3 = t2.element, n6 = t2.invertedChildren, r3 = t2.body;
          return function(t3) {
            var s3 = t3.matrix, a2 = t3.opacity, o4 = t3.forceMinVals;
            if (e(a2) && (i3.style.opacity = a2 + ""), o4 && (i3.style.minHeight = "1px", i3.style.minWidth = "1px"), s3) {
              var l2 = function(t4) {
                return "matrix(" + t4.join(", ") + ")";
              }(s3);
              i3.style.transform = l2, n6 && function(t4) {
                var e3 = t4.matrix, i4 = t4.body;
                t4.invertedChildren.forEach(function(t5) {
                  var n7 = t5[0], r4 = t5[1];
                  if (i4.contains(n7)) {
                    var s4 = e3[0], a3 = e3[3], o5 = e3[5], l3 = { translateX: 0, translateY: 0, scaleX: 1, scaleY: 1 }, p5 = "";
                    r4.translate && (l3.translateX = -e3[4] / s4, l3.translateY = -o5 / a3, p5 += "translate(" + l3.translateX + "px, " + l3.translateY + "px)"), r4.scale && (l3.scaleX = 1 / s4, l3.scaleY = 1 / a3, p5 += " scale(" + l3.scaleX + ", " + l3.scaleY + ")"), n7.style.transform = p5;
                  }
                });
              }({ invertedChildren: n6, matrix: s3, body: r3 });
            }
          };
        }({ element: A4, invertedChildren: Y2, body: T2 });
        if (c3[n5] && c3[n5].onComplete) {
          var J2 = c3[n5].onComplete;
          K2 = function() {
            return J2(A4, b3);
          };
        }
        var z2 = e(q3.opacity) && e(L4.opacity) && q3.opacity !== L4.opacity, G2 = false;
        return a({}, R3, { stagger: V2, springConfig: U2, getOnUpdateFunc: function(t2) {
          var e3 = t2.spring, i3 = t2.onAnimationEnd;
          return d3[n5] = { destroy: e3.destroy.bind(e3), onAnimationEnd: i3 }, function(t3) {
            c3[n5] && c3[n5].onSpringUpdate && c3[n5].onSpringUpdate(t3.getCurrentValue()), G2 || (G2 = true, c3[n5] && c3[n5].onStart && c3[n5].onStart(A4, b3));
            var e4 = t3.getCurrentValue();
            if (T2.contains(A4)) {
              var i4 = { matrix: [] };
              i4.matrix = q3.matrix.map(function(t4, i5) {
                return l(t4, L4.matrix[i5], e4);
              }), z2 && (i4.opacity = l(q3.opacity, L4.opacity, e4)), H2(i4);
            } else t3.destroy();
          };
        }, initializeFlip: function() {
          H2({ matrix: q3.matrix, opacity: z2 ? q3.opacity : void 0, forceMinVals: E4 }), c3[n5] && c3[n5].onStartImmediate && c3[n5].onStartImmediate(A4, b3), O4.transformOrigin ? A4.style.transformOrigin = O4.transformOrigin : v3 && (A4.style.transformOrigin = "0 0"), Y2.forEach(function(t2) {
            var e3 = t2[0], i3 = t2[1];
            i3.transformOrigin ? e3.style.transformOrigin = i3.transformOrigin : v3 && (e3.style.transformOrigin = "0 0");
          });
        }, onAnimationEnd: function(t2) {
          delete d3[n5], i(K2) && K2(), A4.style.transform = "", Y2.forEach(function(t3) {
            t3[0].style.transform = "";
          }), E4 && A4 && (A4.style.minHeight = "", A4.style.minWidth = ""), t2 || (x3.push(n5), x3.length >= M2.length && o3(x3));
        }, delayUntil: O4.delayUntil });
      }).filter(Boolean);
      if (M2.forEach(function(t2) {
        return (0, t2.initializeFlip)();
      }), S3) return function() {
      };
      var k3 = M2.filter(function(t2) {
        return t2.delayUntil && (e3 = t2.delayUntil, M2.filter(function(t3) {
          return t3.id === e3;
        }).length);
        var e3;
      }), j3 = {}, B3 = {}, N3 = {};
      k3.forEach(function(t2) {
        t2.stagger ? (N3[t2.stagger] = true, B3[t2.delayUntil] ? B3[t2.delayUntil].push(t2.stagger) : B3[t2.delayUntil] = [t2.stagger]) : j3[t2.delayUntil] ? j3[t2.delayUntil].push(t2) : j3[t2.delayUntil] = [t2];
      });
      var L3 = M2.filter(function(t2) {
        return t2.stagger;
      }).reduce(function(t2, e3) {
        return t2[e3.stagger] ? t2[e3.stagger].push(e3) : t2[e3.stagger] = [e3], t2;
      }, {}), q2 = M2.filter(function(t2) {
        return -1 === k3.indexOf(t2);
      });
      return q2.forEach(function(t2) {
        t2.onSpringActivate = function() {
          j3[t2.id] && j3[t2.id].forEach(U), B3[t2.id] && Object.keys(B3[t2.id].reduce(function(t3, e3) {
            var i3;
            return a(t3, ((i3 = {})[e3] = true, i3));
          }, {})).forEach(function(t3) {
            V(L3[t3], A3[t3]);
          });
        };
      }), function() {
        return M2.length || o3([]), q2.filter(function(t2) {
          return !t2.stagger;
        }).forEach(U), Object.keys(L3).forEach(function(t2) {
          N3[t2] || V(L3[t2], A3[t2]);
        }), O3;
      };
    }(Z);
    j2 ? j2({ hideEnteringElements: z, animateEnteringElements: G, animateExitingElements: Q, animateFlippedElements: $ }) : (z(), Q().then(G), $());
  }
};
var j = function(t2) {
  var e3 = t2.element, i3 = t2.flipCallbacks, n3 = void 0 === i3 ? {} : i3, s2 = t2.inProgressAnimations, o2 = void 0 === s2 ? {} : s2, l2 = T(e3, t2.portalKey), p2 = r(e3.querySelectorAll("[" + u + "]")), c3 = {}, d3 = [], h3 = {};
  l2.filter(function(t3) {
    return n3 && n3[t3.dataset.flipId] && n3[t3.dataset.flipId].onExit;
  }).forEach(function(t3) {
    var e4 = t3.parentNode;
    if (t3.closest) {
      var i4 = t3.closest("[" + f + "]");
      i4 && (e4 = i4);
    }
    var n4 = d3.findIndex(function(t4) {
      return t4[0] === e4;
    });
    -1 === n4 && (d3.push([e4, e4.getBoundingClientRect()]), n4 = d3.length - 1), c3[t3.dataset.flipId] = d3[n4][1], h3[t3.dataset.flipId] = e4;
  });
  var g3 = M(l2), m3 = g3.map(function(t3) {
    var e4 = t3[0], i4 = t3[1], r3 = {};
    if (n3 && n3[e4.dataset.flipId] && n3[e4.dataset.flipId].onExit) {
      var s3 = c3[e4.dataset.flipId];
      a(r3, { element: e4, parent: h3[e4.dataset.flipId], childPosition: { top: i4.top - s3.top, left: i4.left - s3.left, width: i4.width, height: i4.height } });
    }
    return [e4.dataset.flipId, { rect: i4, opacity: parseFloat(window.getComputedStyle(e4).opacity || "1"), domDataForExitAnimations: r3 }];
  }).reduce(R, {});
  return function(t3, e4) {
    Object.keys(t3).forEach(function(e5) {
      t3[e5].destroy && t3[e5].destroy(), t3[e5].onAnimationEnd && t3[e5].onAnimationEnd(true), delete t3[e5];
    }), e4.forEach(function(t4) {
      t4.style.transform = "", t4.style.opacity = "";
    });
  }(o2, l2.concat(p2)), { flippedElementPositions: m3, cachedOrderedFlipIds: g3.map(function(t3) {
    return t3[0].dataset.flipId;
  }) };
};
var B = function() {
  function t2(t3) {
    this.element = void 0, this.staggerConfig = void 0, this.applyTransformOrigin = true, this.handleEnterUpdateDelete = void 0, this.debug = void 0, this.spring = void 0, this.inProgressAnimations = void 0, this.flipCallbacks = void 0, this.snapshot = void 0, this.onComplete = void 0, this.onStart = void 0, a(this, t3), this.inProgressAnimations = {}, this.flipCallbacks = {}, this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this), this.update = this.update.bind(this), this.addFlipped = this.addFlipped.bind(this), this.addInverted = this.addInverted.bind(this);
  }
  var e3 = t2.prototype;
  return e3.recordBeforeUpdate = function() {
    this.snapshot = j({ element: this.element, flipCallbacks: this.flipCallbacks, inProgressAnimations: this.inProgressAnimations });
  }, e3.update = function(t3, e4) {
    this.snapshot && (k({ flippedElementPositionsBeforeUpdate: this.snapshot.flippedElementPositions, cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds, containerEl: this.element, inProgressAnimations: this.inProgressAnimations, flipCallbacks: this.flipCallbacks, applyTransformOrigin: this.applyTransformOrigin, spring: this.spring, debug: this.debug, staggerConfig: this.staggerConfig, handleEnterUpdateDelete: this.handleEnterUpdateDelete, decisionData: { previous: t3, current: e4 }, onComplete: this.onComplete, onStart: this.onStart }), delete this.snapshot);
  }, e3.addFlipped = function(t3) {
    var e4 = t3.element, i3 = t3.flipId, n3 = t3.opacity, r3 = t3.translate, s2 = t3.scale, o2 = t3.transformOrigin, l2 = t3.spring, p2 = t3.stagger, c3 = t3.delayUntil, u3 = t3.onAppear, d3 = t3.onStart, f3 = t3.onSpringUpdate, h3 = t3.onComplete, g3 = t3.onExit, m3 = t3.shouldFlip, v2 = t3.shouldInvert;
    if (!e4) throw new Error("no element provided");
    if (!i3) throw new Error("No flipId provided");
    var y3 = { scale: s2, translate: r3, opacity: n3, transformOrigin: o2, spring: l2, stagger: p2, delayUntil: c3 };
    y3.scale || y3.translate || y3.opacity || a(y3, { translate: true, scale: true, opacity: true }), i3 && (e4.dataset.flipId = String(i3)), e4.dataset.flipConfig = JSON.stringify(y3), this.flipCallbacks[i3] = { shouldFlip: m3, shouldInvert: v2, onAppear: u3, onStart: d3, onSpringUpdate: f3, onComplete: h3, onExit: g3 };
  }, e3.addInverted = function(t3) {
    var e4 = t3.element, i3 = t3.parent, n3 = t3.opacity, r3 = t3.translate, s2 = t3.scale, o2 = t3.transformOrigin;
    if (!e4) throw new Error("no element provided");
    if (!i3) throw new Error("parent must be provided");
    var l2 = i3.dataset.flipId, p2 = { scale: s2, translate: r3, opacity: n3, transformOrigin: o2 };
    p2.scale || p2.translate || p2.opacity || a(p2, { translate: true, scale: true, opacity: true }), e4.dataset.inverseFlipId = l2, e4.dataset.flipConfig = JSON.stringify(p2);
  }, t2;
}();
var N = new w();
var L = function(t2) {
  var e3 = t2.values, i3 = t2.onUpdate, n3 = t2.delay, r3 = void 0 === n3 ? 0 : n3, s2 = t2.onComplete, o2 = a({}, g.noWobble, m(t2.config)), p2 = o2.overshootClamping, c3 = N.createSpring(o2.stiffness, o2.damping);
  return c3.setOvershootClampingEnabled(!!p2), c3.addListener({ onSpringAtRest: function(t3) {
    s2 && s2(), t3.destroy();
  }, onSpringUpdate: function(t3) {
    var n4 = t3.getCurrentValue();
    if (!e3) return i3(n4);
    var r4 = Object.keys(e3).map(function(t4) {
      return [t4, l(e3[t4][0], e3[t4][1], n4)];
    }).reduce(function(t4, e4) {
      var i4;
      return Object.assign(t4, ((i4 = {})[e4[0]] = e4[1], i4));
    }, {});
    i3(r4);
  } }), r3 ? setTimeout(function() {
    c3.setEndValue(1);
  }, r3) : c3.setEndValue(1), c3;
};

// ../node_modules/react-flip-toolkit/lib/index.es.js
function c2(e3, t2) {
  return (c2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t3) {
    return e4.__proto__ = t3, e4;
  })(e3, t2);
}
function d2(e3, t2) {
  if (null == e3) return {};
  var r3, n3, i3 = {}, o2 = Object.keys(e3);
  for (n3 = 0; n3 < o2.length; n3++) t2.indexOf(r3 = o2[n3]) >= 0 || (i3[r3] = e3[r3]);
  return i3;
}
var f2 = (0, import_react.createContext)({});
var u2 = (0, import_react.createContext)("portal");
var h2 = function(t2) {
  var r3, n3;
  function i3() {
    var e3;
    return (e3 = t2.apply(this, arguments) || this).inProgressAnimations = {}, e3.flipCallbacks = {}, e3.el = void 0, e3;
  }
  n3 = t2, (r3 = i3).prototype = Object.create(n3.prototype), r3.prototype.constructor = r3, c2(r3, n3);
  var l2 = i3.prototype;
  return l2.getSnapshotBeforeUpdate = function(e3) {
    return e3.flipKey !== this.props.flipKey && this.el ? j({ element: this.el, flipCallbacks: this.flipCallbacks, inProgressAnimations: this.inProgressAnimations, portalKey: this.props.portalKey }) : null;
  }, l2.componentDidUpdate = function(e3, t3, r4) {
    this.props.flipKey !== e3.flipKey && this.el && k({ flippedElementPositionsBeforeUpdate: r4.flippedElementPositions, cachedOrderedFlipIds: r4.cachedOrderedFlipIds, containerEl: this.el, inProgressAnimations: this.inProgressAnimations, flipCallbacks: this.flipCallbacks, applyTransformOrigin: this.props.applyTransformOrigin, spring: this.props.spring, debug: this.props.debug, portalKey: this.props.portalKey, staggerConfig: this.props.staggerConfig, handleEnterUpdateDelete: this.props.handleEnterUpdateDelete, decisionData: { previous: e3.decisionData, current: this.props.decisionData }, onComplete: this.props.onComplete, onStart: this.props.onStart });
  }, l2.render = function() {
    var t3 = this, r4 = this.props, n4 = r4.portalKey, i4 = import_react.default.createElement(f2.Provider, { value: this.flipCallbacks }, import_react.default.createElement(r4.element, { className: r4.className, ref: function(e3) {
      return t3.el = e3;
    } }, this.props.children));
    return n4 && (i4 = import_react.default.createElement(u2.Provider, { value: n4 }, i4)), i4;
  }, i3;
}(import_react.Component);
h2.defaultProps = { applyTransformOrigin: true, element: "div" };
var m2 = function(e3) {
  var t2, r3 = e3.children, o2 = e3.flipId, p2 = e3.inverseFlipId, a2 = e3.portalKey, c3 = d2(e3, ["children", "flipId", "inverseFlipId", "portalKey"]), f3 = r3, u3 = /* @__PURE__ */ function(e4) {
    return "function" == typeof e4;
  }(f3);
  if (!u3) try {
    f3 = import_react.Children.only(r3);
  } catch (e4) {
    throw new Error("Each Flipped component must wrap a single child");
  }
  c3.scale || c3.translate || c3.opacity || p.assign(c3, { translate: true, scale: true, opacity: true });
  var h3 = ((t2 = {})[h.DATA_FLIP_CONFIG] = JSON.stringify(c3), t2);
  return void 0 !== o2 ? h3[h.DATA_FLIP_ID] = String(o2) : p2 && (h3[h.DATA_INVERSE_FLIP_ID] = String(p2)), void 0 !== a2 && (h3[h.DATA_PORTAL_KEY] = a2), u3 ? f3(h3) : (0, import_react.cloneElement)(f3, h3);
};
var y2 = function(t2) {
  var r3 = t2.children, n3 = t2.flipId, i3 = t2.shouldFlip, o2 = t2.shouldInvert, p2 = t2.onAppear, s2 = t2.onStart, a2 = t2.onStartImmediate, c3 = t2.onComplete, h3 = t2.onExit, y3 = t2.onSpringUpdate, g3 = d2(t2, ["children", "flipId", "shouldFlip", "shouldInvert", "onAppear", "onStart", "onStartImmediate", "onComplete", "onExit", "onSpringUpdate"]);
  return r3 ? g3.inverseFlipId ? import_react.default.createElement(m2, Object.assign({}, g3), r3) : import_react.default.createElement(u2.Consumer, null, function(t3) {
    return import_react.default.createElement(f2.Consumer, null, function(d3) {
      return p.isObject(d3) && n3 && (d3[n3] = { shouldFlip: i3, shouldInvert: o2, onAppear: p2, onStart: s2, onStartImmediate: a2, onComplete: c3, onExit: h3, onSpringUpdate: y3 }), import_react.default.createElement(m2, Object.assign({ flipId: n3 }, g3, { portalKey: t3 }), r3);
    });
  }) : null;
};
y2.displayName = "Flipped";
var g2 = function(e3) {
  var t2;
  return (0, import_react.cloneElement)(e3.children, ((t2 = {})[h.DATA_EXIT_CONTAINER] = true, t2));
};
export {
  g2 as ExitContainer,
  y2 as Flipped,
  h2 as Flipper,
  L as spring
};
/*! Bundled license information:

rematrix/dist/rematrix.es.js:
  (*! @license Rematrix v0.2.2
  
  	Copyright 2018 Fisssion LLC.
  
  	Permission is hereby granted, free of charge, to any person obtaining a copy
  	of this software and associated documentation files (the "Software"), to deal
  	in the Software without restriction, including without limitation the rights
  	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  	copies of the Software, and to permit persons to whom the Software is
  	furnished to do so, subject to the following conditions:
  
  	The above copyright notice and this permission notice shall be included in
  	all copies or substantial portions of the Software.
  
  	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  	THE SOFTWARE.
  *)
*/
//# sourceMappingURL=react-flip-toolkit.js.map
